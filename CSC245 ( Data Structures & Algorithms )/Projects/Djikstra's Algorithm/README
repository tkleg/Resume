Program Description:

	This program is designed to due 3 things:
		1. Print a dijsktra algorithm summary table for a graph
		2. Print a prim algorithm summary table for a graph
		3. Print all the cycles present in a graph


Specifiction:
	The program uses a Graph class given by the teacher to store all vertices and edges in the graph. The graph is found in a file who's name is passed to the program in the command line.


Client Algorithm:
	1. The program prints an appropriate error message and terminates if there is a command line issue.
	2. The graph is built based off the text within the file from the user given file name
	3. All vertices in the graph are printed
	4. The user is prompted to enter the start vertex for a Dijkstra and Prim algorithm. This continues until the user enters a vertex that exists within the graph
	5. The program runs and prints a summary table for a Dijkstra's algorithm run of the graph with the starting vertex entered by the user in step 4
	6. The program runs and prints a summary table for a Prim's Algorithm run of the graph with the starting vertex entered by the user in step 4
	7. The program finds and stores every single cycle that exists in the graph
		a. This is done with a recursive depth-first-search with one non-resursive call for every vertex in the graph
	8. If no cycles exist in the graph, that is told to the user. Otherwise, every cycle in the graph is printed


Outline of the Graph class:

	1. An array is used to store all of the vertices of a graph
	2. A 2D array is used to store all of the edges of a graph
		a. edges[index1][index2] for example would be the edge distance from the vertex at index1 in the vertex array to the vertex at index2 in the vertex array. edges[index1][index2] is 0 if there is no edge.
	3. An array is used for the marks of every vertex in the graph. This can be used to assist with a Dijkstra or Prim algorithm with the graph

Dijkstra Algorithm on ginfile2.dat

	1. Start index is v1, so mark it, make its dist 0, its previous N/A. Let nodeL = v1.
	2. Consider all other vertex distances as infinity
	3. For every node that nodeL has an edge to and that is currently unmarked, if nodeL's dist + the edge weight is less than the vertex's current dist we set the vertex's dist = nodeL's dist + the edge weight and make the vertex's previous = nodeL
	4. Mark the index with the lowest distance that is unmarked. Make nodeL = this vertex.
	5. Repeat steps 3 and 4 until upon reaching step 4, you find that every vertex is already marked.

	Note: The number after 'T_' in the Mark column indicates the order in which vertices are marked. This number has no effect on the algorothm whatsoever.
	Vert | Mark | Dist | Previous
	-----------------------------
	v1   | T_0  |  0   | N/A
	v2   |  F   |  2   | v1
	v3   |  F   | inf  |
	v4   |  F   |  1   | v1
	v5   |  F   | inf  |
	v6   |  F   | inf  | 
	v7   |  F   | inf  |
	-----------------------------
	v1   | T_0  |  0   | N/A
	v2   |  F   |  2   | v1
	v3   |  F   |  3   | v4
	v4   | T_1  |  1   | v1
	v5   |  F   |  3   | v4
	v6   |  F   |  9   | v4
	v7   |  F   |  5   | v4
	-----------------------------
	v1   | T_0  |  0   | N/A
	v2   | T_2  |  2   | v1
	v3   |  F   |  3   | v4
	v4   | T_1  |  1   | v1
	v5   |  F   |  3   | v4
	v6   |  F   |  9   | v4
	v7   |  F   |  5   | v4
	----------------------------
	v1   | T_0  |  0   | N/A
	v2   | T_2  |  2   | v1
	v3   | T_3  |  3   | v4
	v4   | T_1  |  1   | v1
	v5   |  F   |  3   | v4
	v6   |  F   |  8   | v3
	v7   |  F   |  5   | v4
	----------------------------
	v1   | T_0  |  0   | N/A
	v2   | T_2  |  2   | v1
	v3   | T_3  |  3   | v4
	v4   | T_1  |  1   | v1
	v5   | T_4  |  3   | v4
	v6   |  F   |  8   | v3
	v7   |  F   |  5   | v4
	----------------------------
	v1   | T_0  |  0   | N/A
	v2   | T_2  |  2   | v1
	v3   | T_3  |  3   | v4
	v4   | T_1  |  1   | v1
	v5   | T_4  |  3   | v4
	v6   |  F   |  6   | v7
	v7   | T_5  |  5   | v4
	---------------------------
	Summary Table:
	v1   | T_0  |  0   | N/A
	v2   | T_2  |  2   | v1
	v3   | T_3  |  3   | v4
	v4   | T_1  |  1   | v1
	v5   | T_4  |  3   | v4
	v6   | T_6  |  6   | v7
	v7   | T_5  |  5   | v4

	Now the shortest path to get to any vertex from v1 can be found from ending at said vertex and coming from that vertex's previous vertex until you arrive at v1.
