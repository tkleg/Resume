#include<iostream>
#include<cstdlib>
#include<cctype>
#include<vector>
#include<string>
#include "stack.h"
using namespace std;

vector<string> getLine();

bool isOperator( char c );
bool isCommand( char c );

//void pushInput( string input, Stack<int> & myStack );

string getInt( string linePart );//returns a string because it will be in a string vector temporarily

void runStack( vector<string> input, Stack<int> & myStack );
class invalidChar{
public:
       invalidChar( char c ) : stray(c){}
       string getMessage(){
		return "Invalid Input: '" + string(1,stray) + "' is not a valid character. This character will be ignored by the calculator.";
	}
	
private:
	char stray;

};

class stray_{//when an underscore is not followed immediately by a digit
public:
	stray_(){}
	string getMessage(){
		return "Underscores must be followed by a digit.";
	}
};


int main(){


while(cin){}//prevents anything from running until ctrl+D is hit
cin.clear();//resets cin so that 

vector<string> input; // will hold one input line at a time and will input al of its values into the stack
Stack<int> myStack(10);
while( cin ){

	input = getLine();
	cout<< endl;
	for( int x = 0; x < input.size(); x++ )
		cout << input[x] << ", ";
//	runStack( input, myStack );
}

return 0;
}

vector<string> getLine(){
	vector<string> input;
	string line;
	getline( cin, line );
	for( int x = 0; x < line.length(); x++ ){
		char c = line[x];
		
		if( isOperator( c ) || isCommand( c ) )
			input.push_back( string(1,c) );
		else if( isdigit( c ) || c == '_' ){
			string num;
			try{
				num = getInt( line.substr( x ) );
			}catch( stray_ e ){
				cout << endl << e.getMessage() << endl;
				continue;
			}
			input.push_back( num );
			if( num.length() > 1 )
                        	x += num.length() - 1;
		}else if( c == ' ' || c == '\t' )//handles whitespace
			continue;
		else{
			try{
				throw invalidChar( c );
			}catch( invalidChar e ){
				cout << endl << e.getMessage() << endl;
			}
		}
				
	}
	return input;
	
}

bool isOperator( char c ){
	return (c == '+' || c == '-' || c == '/' || c == '%' || c == '*');
}

bool isCommand( char c ){
	return (c == 'p' || c == 'n' || c == 'f' || c == 'd' || c == 'r');
}

string getInt( string linePart ){
	string num = "";
	bool neg = false;
	if( linePart[0] == '_' ){
		neg = true;
		linePart = linePart.substr(1);
	}
	for( int x = 0; x < linePart.length(); x++ ){
		if( isdigit( linePart[x] ) )
			num += linePart[x];
		else
			break;
	}
	if( neg )
		num = "-"+num;
	if( num.length() == 1 && neg )
		throw stray_();
	return num;
}

void runStack( vector<string> input, Stack<int> & myStack ){

	for( int x = 0; x < input.size(); x++ ){
		try{
			pushInput( input[x] , myStack );
		}catch( DivisionByZero e ){
			cout << endl << "You cannot divide by 0" << endl;
		}
	}

}

void pushInput( string input, Stack<int> & myStack ){
	try{
		if( input[0] == '-' || isdigit( input[0] ) )
			myStack.push( stoi( input ) );
		else if()
}
