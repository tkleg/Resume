Problem: We have to design a BINGO game that is filled with numbers from a file "bingo.in"

Algorithm breakdown

1. Make the BINGO card
	a. do this by asking the user what file they want the integers to come from thgen making a Scanner to 
	   go through that file and get the first 25 integers in it
        b. possibly allow other methods of filling the card such as randomizing them
		1. This would require generating random numbers (1 to 75) and making sure they fit for whatever
		   column they are being generated for. Also it would require using an ArrayList to make sure
		   that no number is used twice on the card

2. Marking a card
	a. do this by picking a random number (1 to 75) and seeing if it hasn't already been picked
	   by checking if it's contained in an ArrayList holding all of the already guessed integers
	b. change wherever the picked number is in the 2d array 'card' to be 0

3. Determining if a card can be a win
	a. do this by summing up every number for each individual row, column, and diagonal using methods
	b. then see if any of the sums equal 0 and print the corresponding win message(s)


Method Breakdown
  Note: My original concept for this program had the 2d array holding all the
  numbers in the card and the ArrayList holding all of the guessed numbers as
  global class variables. This is why there are so few parameters in the
  method breakdown.
  
  void fillCard( String fileName )
      fills "card" with numbers from the file "fileName"

  void fillRandomCard()
      fills "card" with random numbers that work for a BINGO card
  
  void printCard()
      prints "card" in an organized manner with a header saying "BINGO"
      
  void printLineSeperator()
      prints a bunch of subtraction signs to be used between rows in the BINGO
      card when printed
      
  void playGame()
      keeps guessing new numbers that may be on the bingo board until there is a
      win
      
  void markCard( int num )
      change "card" so that a "0" now appears wherever "num" was
      
  void printPickedNumbers()
      prints out all of the numbers guessed by the game with a header
      
  void checkWin()
      calls 3 methods to check if there are partiular win types then prints out
      all of the different types of wins along with how many guesses it took
      
  boolean checkVerticalWin()
      returns true if there is a vertical win on the board, otherwise it returns
      false
      
  boolean checkHorizontalWin()
      returns true if there is a horizontal win on the board, otherwise it
      returns false
      
  boolean checkDiagonalWin()
      returns true if there is a diagonal win on the board, otherwise it returns
      false
