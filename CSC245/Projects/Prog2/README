1. The goal that is solved by the client program is making a function postfix integer calculator that handles a variety of operators, commands, multi-digit integers, and invalid inputs.

2. The input to the program will be a mix of integers ( if they are to be negative they must have an underscore in front of them instead of a minus sign ), commands ( several listed in the prog2.pdf on canvas ), and operators ( plus, minues, divide, multiple, and mod ). Any other input is handled by the client file throughthe use if statements and try-catch statements. The output of the program will be the data that the various commands tell the calculator to do. These include printing the top of the stack, the entire stack, and the top two values of the stack.

3. The classes used by this program are the stack class and varoius small classes meant to handle invalid inputs and divide by zero cases. The stack class contains several methods that most stacks commonly use such as top, pop, topAndPop, push, makeEmpty, isEmpty, isFull. These are all methods which carry out various self explanetory functions on a stack object. The stack class also has two private variables, theArray and topOfStack. theArray is an Object<vector> designed to hold values in a stack. topOfStack is an integer variable meant to let the stack object iterate through itself. The top method returns the top object in the stack object. The pop method pops the top object on the stack off of the stack. The topAndPop both pops the top objects on the stack off of the stack and returns it. The push method pushes a new object onto the stack. The makeEmpty method empties the entire stack object. The isEmpty method returns true if the stack object is empty, otherwise it returns false. The isFull method returns true if the stack object is full, otherwise it returns false.

4. The program reads one line from input at a time. For each line the program procceses it. This is done by continually pulling 'tokens' off of the input line and processing them. (a token is either an integer to be pushed onto the stack, an operator to do a mathematical operation on the stack, or a command which does some action with the stack ). The program does this by continually pulling 'tokens' off the input line until it's length is 0. 

To pull a 'token' from the stack it looks at the character at the front of the stack. If the character is a valid operator or command, the proper action is taken on the stack and the character is removed from the input line. If the character at the front of the line is whitespace, it is ignored and removed from the front of the line. If the character at the front of the stack is an underscore and their is not a digit following, an error message is printed. If the underscore is followed by digits, then digits are added to the back of an integer until there's no more digits, at which time the negative integer is added to the stack. If the character at the front of the line is a digit, then digits are added onto the back of it until there's no more digits, at which time the integer built is put onto the stack.

If a character is inputted that cannot by operated on by the stack, it is ignored and an error message is printed. If the calculator attempts to divide or mod by zero, a division by zero error message is printed. If the calculator attempts to pull an integer from the stack when it's empty, an error message is printed. If the calculator attempts to add an integer to the stack when it's full, an error message is printed.

The commands that the calculator can do are as follows:
  1. p - this prints the integer at the top of the stack if it is not empty
  2. n - this prints the value at the top of the stack and removes it from the stack
  3. f - this prints the entire contents of the stack
  4. c - this empties the stack
  5. d - this duplicates the value on top of the stack and pushes its copy on top of the stack if it's not full
  6. r - this reverses the two values on top of the stack