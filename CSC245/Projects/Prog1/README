1. Attributes of DList and Reason for Templates
	the DList has two arributes, length and head. Length is simply an integer holding the number of values in the DList object. head is a pointer to a NodeType<ItemType> struct that represents the first node in the DList. Templates are used so that different types of data con be stored in the list. With a template, a list of any data type can be made.

2. Description of operations of the DList class
	void makeEmpty(): pretty straightforward, this simply empties the list so that the length is 0 and the head is NULL
	void deleteItem( ItemType item ): this method takes in some data as a parameter, this method searches through the DList calling it and it will delete the Node holding the item if it is found. If it is not found, this method does nothing
	bool inList( ItemType item ) const: this method returns a boolean value, true if the item in the parameter is stored in any of the nodes in the DList, false if the parameter is not found
	bool isEmpty() const: this method simply returns true if the DList is empty and false if it is not empty
	void insertHead( ItemType item ): this method takes in some data and puts it into a new Node at the start of the list
	void appendTail( ItemType item ): this method takes in some data and puts it into a new Node at the end of the list
	int lengthIs() const: this method simply returns the length of the DList
	NodeType<ItemType>* location( ItemType item ) const: this method returns a pointer to the node in the list holding the data type equal to item if it exists, otherwise it returns NULL
	NodeType<ItemType>* last() const: this returns a pointer to the node at the end of the list if it exists, otherwise it returns NULL
	void deleteLocation (NodeType<ItemType>* delPtr ): this method deletes the node which the parameter is pointing to if it exists, otherwise this method does nothing

3. The role of the Move to the Front Algorithm is to make more commonly accessed data easier to access. Saving time in many real world applications requiring search through the list

4. The main algorithm of the client program works by first declaring a DList object templated to hold integers and a single char variable. Then the algorithm enters a loop.
	In this loop, the menu options are printed which the user can choose from, the user then enters a character to select an option, then the algorithm does the appropriate action via a switch statement.
	This loop continues until either the program crashes or the user enters q, entering the program
